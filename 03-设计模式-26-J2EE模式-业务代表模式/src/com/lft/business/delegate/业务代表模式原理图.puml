@startuml
!define DARK
!include G:\WorkSpace\Java\IJCode\Design-Pattern\lib\LFT-UML.puml
' 允许各种图混合使用
allowmixing

' 说明文字
'caption 业务代表模式原理图

' 页眉
left header
业务代表模式原理图
end header

' 页脚
right footer
业务代表模式原理图
end footer

'' 图例说明
'legend top
'【需求】
'公司考核若干个大学生和研究生，以决定是否录用。在这个问题中,大学生和研究生都有自己的成绩，
'但是他们不能依据自己的成绩单制定录用标准，录用标准必须是公司来确定。
'end legend

' 标题
title 业务代表模式原理图



' 正文开始




class BusinessDelegate{
	- lookup: BusinessLookup
	- service: BusinessService
	- serviceType: String
	+ setServiceType(): void
	+ doTask(): void
}
note right
业务代表(Business Delegate)
一个为客户端实体提供的入口类，
它提供了对业务服务方法的访问。
end note

class BusinessLookup{
	+ doProcessing(): void
}
note left
查询服务(LookUp Service)
查询服务对象负责获取相关的业务实现，
并提供业务对象对业务代表对象的访问。
end note

interface BusinessService{
	+ {abstract} doProcessing(): void
}
note right
业务服务(Business Service)
业务服务接口
实现了该业务服务的实体类，提供了实际的业务实现逻辑。
end note

BusinessDelegate o-- BusinessLookup
BusinessDelegate o-- BusinessService

class EJBService implements BusinessService{
	+ doProcessing(): void
}
class JMSService implements BusinessService{
	+ doProcessing(): void
}

class Strategies{
	- service: BusinessService
	+ Strategies(BusinessDelegate)
	+ doTask(): void
}
note left
策略类(Strategies)
表示层代码可以是 JSP、servlet 或 UI java 代码。
end note

Strategies o-right- BusinessDelegate

class BusinessDelegatePatternDemo{
	+ main(): void
}
BusinessDelegatePatternDemo ..> Strategies
BusinessDelegatePatternDemo ..> BusinessDelegate





' 正文结束



/''''说明与样式
' 类之间的关系
依赖关系..>     .>		<.		<..
继承关系--|>    -|>		<|-		<|--
实现关系..|>    .|>		<|.		<|..
关联关系-->     <-->		--		->		<->
聚合关系--o     <--o		o-		o--
组合关系--*     <--*		*-		*--

' 访问权限
- private
# protected
~ default
+ public

' 备注
1. note top of Object : 备注在对象的四周
2. note "无方位位置" as Note1
3. note left: 备注在前一个类的四周
4. note on link #red : 链接注释
5. note left of Object
	注释内容
   end note

' 包
package com.lft.design.pattern {
	' 接口
	interface 接口
	' 棒棒糖接口()-- ()- --() -()
	接口 ()-- A
	' 抽象类
	abstract class AbstractClass
}
' 枚举
enum TimeUnit{
	DAYS
	HOURS
	MINUTES
	SECONDS
}

' 泛型
class Eye<? extends Head>{

}

' 关系
dependence
generalization
implements
generalization
association
aggregation
composition

' 默认方法名
operation(): void

' 命名空间
namespace net.dummy #DDDDDD {
	Meeting o-- Person
	.BaseClass <|- Meeting
}

' 改变箭头方向 left right up down
A .up.> B

' 关系类
class Student{
	Name
}
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment
class Enrollment{
	drop()
	cancel()
}

' 普通类
class Person{
	..Field..
	{field}				- name: String
	{static}{field}		- head: Head
	--Constructor--
	+ Person(name: String)
	==Method==
	{method}			+ getName(): String
	{abstract}{method}	+ doSomething(): void
	__Other__
}
class Head
Person "1" *-- "1" Head : contains >

' 类说明
class A << (I,#FF7700) 说明 >>
' 箭头颜色
A .[#395862].> B
'/
@enduml