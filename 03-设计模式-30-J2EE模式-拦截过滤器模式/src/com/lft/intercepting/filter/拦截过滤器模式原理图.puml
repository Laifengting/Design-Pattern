@startuml
!define DARK
!include G:\WorkSpace\Java\IJCode\Design-Pattern\lib\LFT-UML.puml
' 允许各种图混合使用
allowmixing

' 说明文字
'caption 拦截过滤器模式原理图

' 页眉
left header
拦截过滤器模式原理图
end header

' 页脚
right footer
拦截过滤器模式原理图
end footer

'' 图例说明
'legend top
'【需求】
'公司考核若干个大学生和研究生，以决定是否录用。在这个问题中,大学生和研究生都有自己的成绩，
'但是他们不能依据自己的成绩单制定录用标准，录用标准必须是公司来确定。
'end legend

' 标题
title 拦截过滤器模式原理图



' 正文开始




interface Filter{
	+ {abstract} execute(): void
}
note right
过滤器(Filter)
过滤器接口在请求处理程序执行
请求之前或之后，执行某些任务。
end note

class ConcreteFilterA implements Filter{
	+ execute(): void
}
class ConcreteFilterB implements Filter{
	+ execute(): void
}
note as ConcreteFilterNote
具体的过滤器实现类
end note
ConcreteFilterNote .up. ConcreteFilterA
ConcreteFilterNote .up. ConcreteFilterB

class FilterChain{
	- filterList: List<Filter>
	- target: Target
	+ addFilter(): void
	+ execute(): void
	+ setTarget(): void
}
note left
过滤器链(Filter Chain)
过滤器链带有多个过滤器，并在Target上
按照定义的顺序执行这些过滤器。
end note

class Target{
	+ execute(): void
}
note bottom
目标处理程序(Target)请求处理程序。
end note

FilterChain o-right- Filter
FilterChain o-- Target

class FilterManager{
	- chain: FilterChain
	+ FilterManager()
	+ setFilter(): void
	+ filterRequest(): void
}
note left
过滤管理器(Filter Manager)
过滤管理器管理过滤器和过滤器链。
end note

FilterManager o-- FilterChain

class SendRequest{
	- FilterManager: FilterManager
	+ setFilterManager(): void
	+ sendRequest(): void
}
note top
请求发送端(SendRequest)
SendRequest是向Target对象发送请求的对象。
end note

SendRequest o-left- FilterManager

class Client{
	+ main(): void
}
Client .left.> SendRequest





' 正文结束



/''''说明与样式
' 类之间的关系
依赖关系..>     .>		<.		<..
继承关系--|>    -|>		<|-		<|--
实现关系..|>    .|>		<|.		<|..
关联关系-->     <-->		--		->		<->
聚合关系--o     <--o		o-		o--
组合关系--*     <--*		*-		*--

' 访问权限
- private
# protected
~ default
+ public

' 备注
1. note top of Object : 备注在对象的四周
2. note "无方位位置" as Note1
3. note left: 备注在前一个类的四周
4. note on link #red : 链接注释
5. note left of Object
	注释内容
   end note

' 包
package com.lft.design.pattern {
	' 接口
	interface 接口
	' 棒棒糖接口()-- ()- --() -()
	接口 ()-- A
	' 抽象类
	abstract class AbstractClass
}
' 枚举
enum TimeUnit{
	DAYS
	HOURS
	MINUTES
	SECONDS
}

' 泛型
class Eye<? extends Head>{

}

' 关系
dependence
generalization
implements
generalization
association
aggregation
composition

' 默认方法名
operation(): void

' 命名空间
namespace net.dummy #DDDDDD {
	Meeting o-- Person
	.BaseClass <|- Meeting
}

' 改变箭头方向 left right up down
A .up.> B

' 关系类
class Student{
	Name
}
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment
class Enrollment{
	drop()
	cancel()
}

' 普通类
class Person{
	..Field..
	{field}				- name: String
	{static}{field}		- head: Head
	--Constructor--
	+ Person(name: String)
	==Method==
	{method}			+ getName(): String
	{abstract}{method}	+ doSomething(): void
	__Other__
}
class Head
Person "1" *-- "1" Head : contains >

' 类说明
class A << (I,#FF7700) 说明 >>
' 箭头颜色
A .[#395862].> B
'/
@enduml