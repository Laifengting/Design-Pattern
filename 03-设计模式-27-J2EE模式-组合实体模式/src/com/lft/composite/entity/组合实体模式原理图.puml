@startuml
!define DARK
!include G:\WorkSpace\Java\IJCode\Design-Pattern\lib\LFT-UML.puml
' 允许各种图混合使用
allowmixing

' 说明文字
'caption 组合实体模式原理图

' 页眉
left header
组合实体模式原理图
end header

' 页脚
right footer
组合实体模式原理图
end footer

'' 图例说明
'legend top
'【需求】
'公司考核若干个大学生和研究生，以决定是否录用。在这个问题中,大学生和研究生都有自己的成绩，
'但是他们不能依据自己的成绩单制定录用标准，录用标准必须是公司来确定。
'end legend

' 标题
title 组合实体模式原理图



' 正文开始




class CompositeEntity{
	- cgo: CoarseGrainedObject
	+ getData(): String[]
	+ setData(): void
}
note top
组合实体(Composite Entity)
它是主要的实体 bean。它可以是粗粒的，
或者可以包含一个粗粒度对象，用于持续生命周期。
end note

class CoarseGrainedObject{
	- object1: DependentObject1
	- object2: DependentObject2
	+ getData(): String[]
	+ setData(): void
}
note right
粗粒度对象(Coarse-Grained Object)
该对象包含依赖对象。它有自己的生命周期，
也能管理依赖对象的生命周期。
end note

class DependentObject1{
	- data: String
	+ getData(): String
	+ setData(): void
}

class DependentObject2{
	- data: String
	+ getData(): String
	+ setData(): void
}
note as DependentObjectNote
依赖对象(Dependent Object)
依赖对象是一个持续生命周期依赖于粗粒度对象的对象。
end note
DependentObjectNote .up. DependentObject1
DependentObjectNote .up. DependentObject2

class Strategies{
	- entity: CompositeEntity
	+ printData(): void
	+ setData(): void
}
note bottom
策略(Strategies)
策略表示如何实现组合实体。
end note


class CompositeEntityPatternDemo{
	+ main(): void
}

CompositeEntity o-- CoarseGrainedObject
CoarseGrainedObject o-- DependentObject1
CoarseGrainedObject o-- DependentObject2
Strategies o-right- CompositeEntity
CompositeEntityPatternDemo ..> Strategies



' 正文结束



/''''说明与样式
' 类之间的关系
依赖关系..>     .>		<.		<..
继承关系--|>    -|>		<|-		<|--
实现关系..|>    .|>		<|.		<|..
关联关系-->     <-->		--		->		<->
聚合关系--o     <--o		o-		o--
组合关系--*     <--*		*-		*--

' 访问权限
- private
# protected
~ default
+ public

' 备注
1. note top of Object : 备注在对象的四周
2. note "无方位位置" as Note1
3. note left: 备注在前一个类的四周
4. note on link #red : 链接注释
5. note left of Object
	注释内容
   end note

' 包
package com.lft.design.pattern {
	' 接口
	interface 接口
	' 棒棒糖接口()-- ()- --() -()
	接口 ()-- A
	' 抽象类
	abstract class AbstractClass
}
' 枚举
enum TimeUnit{
	DAYS
	HOURS
	MINUTES
	SECONDS
}

' 泛型
class Eye<? extends Head>{

}

' 关系
dependence
generalization
implements
generalization
association
aggregation
composition

' 默认方法名
operation(): void

' 命名空间
namespace net.dummy #DDDDDD {
	Meeting o-- Person
	.BaseClass <|- Meeting
}

' 改变箭头方向 left right up down
A .up.> B

' 关系类
class Student{
	Name
}
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment
class Enrollment{
	drop()
	cancel()
}

' 普通类
class Person{
	..Field..
	{field}				- name: String
	{static}{field}		- head: Head
	--Constructor--
	+ Person(name: String)
	==Method==
	{method}			+ getName(): String
	{abstract}{method}	+ doSomething(): void
	__Other__
}
class Head
Person "1" *-- "1" Head : contains >

' 类说明
class A << (I,#FF7700) 说明 >>
' 箭头颜色
A .[#395862].> B
'/
@enduml