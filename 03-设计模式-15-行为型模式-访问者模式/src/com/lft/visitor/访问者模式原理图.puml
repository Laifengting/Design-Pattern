@startuml
!define DARK
!include G:\WorkSpace\Java\IJCode\Design-Pattern\lib\LFT-UML.puml
' 允许各种图混合使用
allowmixing

' 说明文字
'caption 传输对象模式示例图

' 页眉
'left header
'接口隔离原则
'end header

' 页脚
'right footer
'接口隔离原则
'end footer

'' 图例说明
'legend top
'【需求】
'公司考核若干个大学生和研究生，以决定是否录用。在这个问题中,大学生和研究生都有自己的成绩，
'但是他们不能依据自己的成绩单制定录用标准，录用标准必须是公司来确定。
'end legend

' 正文开始
' UML图标题
title 访问者模式原理图

interface Visitor{
	+ {abstract}{method} operation1(): void
	+ {abstract}{method} operation2(): void
}
note bottom of Visitor
抽象访问者，
为该对象的ConcreteElement的
每一个类声明一个visit操作。
end note

class ConcreteVisitor implements Visitor{
	+ {method} operation1(): void
	+ {method} operation2(): void
}
note as ConcreteVisitorNote
具体访问者，
实现Visitor声明的每个操作。
是每个操作实现的部分。
end note

ConcreteVisitorNote .up. ConcreteVisitor

abstract class Element{
	+ {abstract}{method} accept(visitor: Visitor): void
}
Visitor  <-right->  Element
note right of Element
定义了一个accept方法，
接收一个访问者对象。
end note

class ConcreteElementA extends Element{
	+ {method} accept(visitor: Visitor): void
}
class ConcreteElementB extends Element{
	+ {method} accept(visitor: Visitor): void
}
note as ConcreteElement
是具体的元素类，
实现了accept()方法。
end note
ConcreteElement .up. ConcreteElementA
ConcreteElement .up. ConcreteElementB

class ObjectStructure{
		elementList: List<Element>
}
note right
能枚举它的元素。
可以提供一个高层的接口，
用来允许访问者访问元素。
end note

ObjectStructure o-down- Element

class Client

Client ..> Visitor
Client ..> ObjectStructure






/''''说明与样式
' 类之间的关系
依赖关系..>     .>		<.		<..
继承关系--|>    -|>		<|-		<|--
实现关系..|>    .|>		<|.		<|..
关联关系-->     <-->		--		->		<->
聚合关系--o     <--o		o-		o--
组合关系--*     <--*		*-		*--

' 访问权限
- private
# protected
~ default
+ public

' 备注
1. note top of Object : 备注在对象的四周
2. note "无方位位置" as Note1
3. note left: 备注在前一个类的四周
4. note on link #red : 链接注释
5. note left of Object
	注释内容
   end note

' 包
package com.lft.design.pattern {
	' 接口
	interface Interface
	' 棒棒糖接口()-- ()- --() -()
	Interface2 ()-- A
	' 抽象类
	abstract class AbstractClass
}
' 枚举
enum TimeUnit{
	DAYS
	HOURS
	MINUTES
	SECONDS
}

' 泛型
class Eye<? extends Head>{

}

' 命名空间
namespace net.dummy #DDDDDD {
	Meeting o-- Person
	.BaseClass <|- Meeting
}

' 改变箭头方向 left right up down
A .up.> B

' 关系类
class Student{
	Name
}
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment
class Enrollment{
	drop()
	cancel()
}

' 普通类
class Person{
	..Field..
	{field}				- name: String
	{static}{field}		- head: Head
	--Constructor--
	+ Person(name: String)
	==Method==
	{method}			+ getName(): String
	{abstract}{method}	+ doSomething(): void
	__Other__
	~~Something~~
}
class Head
Person "1" *-- "1" Head : contains >

' 类说明
class A << (I,#FF7700) 说明 >>
' 箭头颜色
A .[#395862].> B
'/
@enduml
