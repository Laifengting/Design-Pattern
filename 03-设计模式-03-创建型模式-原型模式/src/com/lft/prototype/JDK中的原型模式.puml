@startuml
!define DARK
!include G:\WorkSpace\Java\IJCode\Design-Pattern\lib\LFT-UML.puml
' 允许各种图混合使用
allowmixing
' 标题
title 原型模式原理图


'原型模式优点
'1、如果创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。
'
'2、可以使用深克隆保持对象的状态。
'
'3、原型模式提供了简化的创建结构。
'
'原型模式缺点
'1、在实现深克隆的时候可能需要比较复杂的代码。
'
'2、需要为每一个类配备一个克隆方法，而且这个克隆方法需要对类的功能进行通盘考虑，这对全新的类来说不是很难，但对已有的类进行改造时，不一定是件容易的事，必须修改其源代码，违背了“开闭原则”。
'
'使用场景
'1、如果创建新对象成本较大，我们可以利用已有的对象进行复制来获得。
'
'2、如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占内存不大的时候，也可以使用原型模式配合备忘录模式来应用。相反，如果对象的状态变化很大，或者对象占用的内存很大，那么采用状态模式会比原型模式更好。
'
'3、需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。
'
'总结
'1、原型模式向客户隐藏了创建对象的复杂性。客户只需要知道要创建对象的类型，然后通过请求就可以获得和该对象一模一样的新对象，无须知道具体的创建过程。
'
'2、克隆分为浅克隆和深克隆两种。
'
'3、我们虽然可以利用原型模式来获得一个新对象，但有时对象的复制可能会相当的复杂，比如深克隆。




class Object{
	==Method==
	+ {method} clone(): Object
}

class ObjectClone{
	==Method==
	+ {method} clone(): Object
}

interface Cloneable

ObjectClone -up-|> Object : extends
ObjectClone .right.|> Cloneable : implements

note top
所有的Java类都继承至Object，而Object类提供了一个
clone()方法，该方法可以将一个java对象复制一份，因
此在java中可以直接使用clone()方法来复制一个对象。
但是需要实现clone的Java类必须要实现一个接口:
Cloneable.该接口表示该类能够复制且具体复制的能力，
如果不实现该接口而直接调用clone()方法会抛出
CloneNotSupportedException异常。

Java中任何实现了Cloneable接口的类都可以通过调用
clone()方法来复制一份自身然后传给调用者。一般而言，
clone()方法满足：

(1) 对任何的对象x，都有x.clone() !=x，即克隆对象
与原对象不是同一个对象。

(2) 对任何的对象x，都有
x.clone().getClass()==x.getClass()，
即克隆对象与原对象的类型一样。

(3) 如果对象x的equals()方法定义恰当，那么
x.clone().equals(x)应该成立。
end note





/''''说明与样式
' 类之间的关系
依赖关系..>     .>		<.		<..
继承关系--|>    -|>		<|-		<|--
实现关系..|>    .|>		<|.		<|..
关联关系-->     <-->		--		->		<->
聚合关系--o     <--o		o-		o--
组合关系--*     <--*		*-		*--

' 访问权限
- private
# protected
~ default
+ public

' 备注
1. note top of Object : 备注在对象的四周
2. note "无方位位置" as Note1
3. note left: 备注在前一个类的四周
4. note on link #red : 链接注释
5. note left of Object
	注释内容
   end note

' 包
package com.lft.design.pattern {
	' 接口
	interface Interface
	' 棒棒糖接口()-- ()- --() -()
	Interface2 ()-- A
	' 抽象类
	abstract class AbstractClass
}
' 枚举
enum TimeUnit{
	DAYS
	HOURS
	MINUTES
	SECONDS
}

' 泛型
class Eye<? extends Head>{

}

' 命名空间
namespace net.dummy #DDDDDD {
	Meeting o-- Person
	.BaseClass <|- Meeting
}

' 改变箭头方向 left right up down
A .up.> B

' 关系类
class Student{
	Name
}
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment
class Enrollment{
	drop()
	cancel()
}

' 普通类
class Person{
	..Field..
	{field}				- name: String
	{static}{field}		- head: Head
	--Constructor--
	+ Person(name: String)
	==Method==
	{method}			+ getName(): String
	{abstract}{method}	+ doSomething(): void
	__Other__
}
class Head
Person "1" *-- "1" Head : contains >

' 类说明
class A << (I,#FF7700) 说明 >>
' 箭头颜色
A .[#395862].> B
'/
@enduml